/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package leituraimg;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Scanner;
import javax.swing.JFileChooser;

/**
 *
 * @author lab214
 */
public class Leitura extends javax.swing.JFrame {

    private String nomeArquivo;

    /**
     * Creates new form Leitura
     */
    public Leitura() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        Limiar50 = new javax.swing.JButton();
        Limiar100 = new javax.swing.JButton();
        Limiar150 = new javax.swing.JButton();
        Limiar200 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenuItem1.setText("jMenuItem1");

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setTitle("Linealizar imagem");
        jInternalFrame1.setVisible(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Limiar arquivo");

        jTextField1.setEditable(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("Localizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Limiar50.setText("Limiar 50");
        Limiar50.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Limiar50ActionPerformed(evt);
            }
        });

        Limiar100.setText("Limiar 100");
        Limiar100.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Limiar100ActionPerformed(evt);
            }
        });

        Limiar150.setText("Limiar 150");
        Limiar150.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Limiar150ActionPerformed(evt);
            }
        });

        Limiar200.setText("Limiar 200");
        Limiar200.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Limiar200ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jInternalFrame1.setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(194, 194, 194))
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Limiar200)
                    .addComponent(Limiar150)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(Limiar50, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Limiar100, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(46, 46, 46)
                .addComponent(Limiar50)
                .addGap(18, 18, 18)
                .addComponent(Limiar100)
                .addGap(18, 18, 18)
                .addComponent(Limiar150)
                .addGap(18, 18, 18)
                .addComponent(Limiar200)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jInternalFrame1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int i = file.showSaveDialog(null);
        if (i == 1) {
            jTextField1.setText("");
        } else {
            File arquivo = file.getSelectedFile();
            jTextField1.setText(arquivo.getName());
            nomeArquivo = jTextField1.getText();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    private void Limiar50ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Limiar50ActionPerformed
        File arquivo = new File(nomeArquivo);
        try (InputStream in = new FileInputStream(arquivo)) {
            Scanner imgEnt = new Scanner(in);
            //LEITURA DO CABELÇALHO
            imgEnt.nextLine();
            imgEnt.nextLine();
            imgEnt.nextLine();
            int numCol = Integer.parseInt(imgEnt.next()); // leitura do número de colunas
            int numLin = Integer.parseInt(imgEnt.next()); // leitura do númeor de linhas
            imgEnt.next(); // leitura do maior valor de pixel

            //LEITURA DO DADOS DA IMAGEM E CARREGAMENTO DA MATRIZ
            int[][] matrizImg = new int[numLin][numCol];
            for (int lin = 0; lin < numLin; lin++) {
                for (int col = 0; col < numCol; col++) {

                    //matrizImg[lin][col] = Integer.parseInt(imgEnt.next());
                    matrizImg[lin][col] = imgEnt.nextInt();

                }
            }

//           for (int lin = 0; lin < matrizImg.length; lin++) {
//                for (int col = 0; col < matrizImg[lin].length; col++) {
//                    System.out.print(matrizImg[lin][col] + " ");
//                }
//                System.out.println();
//            }
            // GRAVANDO IMAGEM PGM
            try (FileWriter out = new FileWriter("Limiar50" + nomeArquivo + ".pgm")) {
                BufferedWriter bw = new BufferedWriter(out);
                //ESCREVENDO O CABEÇALHO DA IAMGEM
                bw.write("P2");
                bw.newLine();
                bw.write("# Criado pelo Grupo");
                bw.newLine();
                bw.write(numCol + " " + numLin);
                bw.newLine();
                bw.write("255");
                bw.newLine();
                //ESCREVENDO OS DADOS DA IMAGEM
                for (int lin = 0; lin < matrizImg.length; lin++) {
                    for (int col = 0; col < matrizImg[lin].length; col++) {
                        if (matrizImg[lin][col] >= 50) {
                            matrizImg[lin][col] = 255;
                        } else {
                            matrizImg[lin][col] = 0;
                        }

                        bw.write(matrizImg[lin][col] + " ");

                    }
                    bw.write("\n");
                }
                bw.flush();

            } catch (IOException ex) {
                System.out.println("ERRO AO SALVAR O ARQUIVO");
            }

        } catch (IOException ex) {
            System.out.println("ERRO AO ABRIR O ARQUIVO");
        }

        Imagem frame = new Imagem();
        frame.setVisible(true);


    }//GEN-LAST:event_Limiar50ActionPerformed

    private void Limiar100ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Limiar100ActionPerformed
        File arquivo = new File(nomeArquivo);
        try (InputStream in = new FileInputStream(arquivo)) {
            Scanner imgEnt = new Scanner(in);
            //LEITURA DO CABELÇALHO
            imgEnt.nextLine();
            imgEnt.nextLine();
            imgEnt.nextLine();
            int numCol = Integer.parseInt(imgEnt.next()); // leitura do número de colunas
            int numLin = Integer.parseInt(imgEnt.next()); // leitura do númeor de linhas
            imgEnt.next(); // leitura do maior valor de pixel

            //LEITURA DO DADOS DA IMAGEM E CARREGAMENTO DA MATRIZ
            int[][] matrizImg = new int[numLin][numCol];
            for (int lin = 0; lin < numLin; lin++) {
                for (int col = 0; col < numCol; col++) {

                    //matrizImg[lin][col] = Integer.parseInt(imgEnt.next());
                    matrizImg[lin][col] = imgEnt.nextInt();

                }
            }

//           for (int lin = 0; lin < matrizImg.length; lin++) {
//                for (int col = 0; col < matrizImg[lin].length; col++) {
//                    System.out.print(matrizImg[lin][col] + " ");
//                }
//                System.out.println();
//            }
            // GRAVANDO IMAGEM PGM
            try (FileWriter out = new FileWriter("limiar100" + nomeArquivo + ".pgm")) {
                BufferedWriter bw = new BufferedWriter(out);
                //ESCREVENDO O CABEÇALHO DA IAMGEM
                bw.write("P2");
                bw.newLine();
                bw.write("# Criado pelo Grupo");
                bw.newLine();
                bw.write(numCol + " " + numLin);
                bw.newLine();
                bw.write("255");
                bw.newLine();
                //ESCREVENDO OS DADOS DA IMAGEM
                for (int lin = 0; lin < matrizImg.length; lin++) {
                    for (int col = 0; col < matrizImg[lin].length; col++) {
                        if (matrizImg[lin][col] >= 100) {
                            matrizImg[lin][col] = 255;
                        } else {
                            matrizImg[lin][col] = 0;
                        }

                        bw.write(matrizImg[lin][col] + " ");

                    }
                    bw.write("\n");
                }
                bw.flush();

            } catch (IOException ex) {
                System.out.println("ERRO AO SALVAR O ARQUIVO");
            }

        } catch (IOException ex) {
            System.out.println("ERRO AO ABRIR O ARQUIVO");
        }
    }//GEN-LAST:event_Limiar100ActionPerformed

    private void Limiar150ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Limiar150ActionPerformed
        File arquivo = new File(nomeArquivo);
        try (InputStream in = new FileInputStream(arquivo)) {
            Scanner imgEnt = new Scanner(in);
            //LEITURA DO CABELÇALHO
            imgEnt.nextLine();
            imgEnt.nextLine();
            imgEnt.nextLine();
            int numCol = Integer.parseInt(imgEnt.next()); // leitura do número de colunas
            int numLin = Integer.parseInt(imgEnt.next()); // leitura do númeor de linhas
            imgEnt.next(); // leitura do maior valor de pixel

            //LEITURA DO DADOS DA IMAGEM E CARREGAMENTO DA MATRIZ
            int[][] matrizImg = new int[numLin][numCol];
            for (int lin = 0; lin < numLin; lin++) {
                for (int col = 0; col < numCol; col++) {

                    //matrizImg[lin][col] = Integer.parseInt(imgEnt.next());
                    matrizImg[lin][col] = imgEnt.nextInt();

                }
            }

//           for (int lin = 0; lin < matrizImg.length; lin++) {
//                for (int col = 0; col < matrizImg[lin].length; col++) {
//                    System.out.print(matrizImg[lin][col] + " ");
//                }
//                System.out.println();
//            }
            // GRAVANDO IMAGEM PGM
            try (FileWriter out = new FileWriter("Limiar150" + nomeArquivo + ".pgm")) {
                BufferedWriter bw = new BufferedWriter(out);
                //ESCREVENDO O CABEÇALHO DA IAMGEM
                bw.write("P2");
                bw.newLine();
                bw.write("# Criado pelo Grupo");
                bw.newLine();
                bw.write(numCol + " " + numLin);
                bw.newLine();
                bw.write("255");
                bw.newLine();
                //ESCREVENDO OS DADOS DA IMAGEM
                for (int lin = 0; lin < matrizImg.length; lin++) {
                    for (int col = 0; col < matrizImg[lin].length; col++) {
                        if (matrizImg[lin][col] >= 150) {
                            matrizImg[lin][col] = 255;
                        } else {
                            matrizImg[lin][col] = 0;
                        }

                        bw.write(matrizImg[lin][col] + " ");

                    }
                    bw.write("\n");
                }
                bw.flush();

            } catch (IOException ex) {
                System.out.println("ERRO AO SALVAR O ARQUIVO");
            }

        } catch (IOException ex) {
            System.out.println("ERRO AO ABRIR O ARQUIVO");
        }
    }//GEN-LAST:event_Limiar150ActionPerformed

    private void Limiar200ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Limiar200ActionPerformed
        File arquivo = new File(nomeArquivo);
        try (InputStream in = new FileInputStream(arquivo)) {
            Scanner imgEnt = new Scanner(in);
            //LEITURA DO CABELÇALHO
            imgEnt.nextLine();
            imgEnt.nextLine();
            imgEnt.nextLine();
            int numCol = Integer.parseInt(imgEnt.next()); // leitura do número de colunas
            int numLin = Integer.parseInt(imgEnt.next()); // leitura do númeor de linhas
            imgEnt.next(); // leitura do maior valor de pixel

            //LEITURA DO DADOS DA IMAGEM E CARREGAMENTO DA MATRIZ
            int[][] matrizImg = new int[numLin][numCol];
            for (int lin = 0; lin < numLin; lin++) {
                for (int col = 0; col < numCol; col++) {

                    //matrizImg[lin][col] = Integer.parseInt(imgEnt.next());
                    matrizImg[lin][col] = imgEnt.nextInt();

                }
            }

//           for (int lin = 0; lin < matrizImg.length; lin++) {
//                for (int col = 0; col < matrizImg[lin].length; col++) {
//                    System.out.print(matrizImg[lin][col] + " ");
//                }
//                System.out.println();
//            }
            // GRAVANDO IMAGEM PGM
            try (FileWriter out = new FileWriter("Limiar200" + nomeArquivo + ".pgm")) {
                BufferedWriter bw = new BufferedWriter(out);
                //ESCREVENDO O CABEÇALHO DA IAMGEM
                bw.write("P2");
                bw.newLine();
                bw.write("# Criado pelo Grupo");
                bw.newLine();
                bw.write(numCol + " " + numLin);
                bw.newLine();
                bw.write("255");
                bw.newLine();
                //ESCREVENDO OS DADOS DA IMAGEM
                for (int lin = 0; lin < matrizImg.length; lin++) {
                    for (int col = 0; col < matrizImg[lin].length; col++) {
                        if (matrizImg[lin][col] >= 200) {
                            matrizImg[lin][col] = 255;
                        } else {
                            matrizImg[lin][col] = 0;
                        }

                        bw.write(matrizImg[lin][col] + " ");

                    }
                    bw.write("\n");
                }
                bw.flush();

            } catch (IOException ex) {
                System.out.println("ERRO AO SALVAR O ARQUIVO");
            }

        } catch (IOException ex) {
            System.out.println("ERRO AO ABRIR O ARQUIVO");
        }
    }//GEN-LAST:event_Limiar200ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Leitura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Leitura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Leitura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Leitura.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Leitura().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Limiar100;
    private javax.swing.JButton Limiar150;
    private javax.swing.JButton Limiar200;
    private javax.swing.JButton Limiar50;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the nomeArquivo
     */
    public String getNomeArquivo() {
        nomeArquivo = jTextField1.getName();
        return nomeArquivo;
    }

    /**
     * @param nomeArquivo the nomeArquivo to set
     */
    public void setNomeArquivo(String nomeArquivo) {
        nomeArquivo = jTextField1.getName();
        this.nomeArquivo = nomeArquivo;
    }
}
